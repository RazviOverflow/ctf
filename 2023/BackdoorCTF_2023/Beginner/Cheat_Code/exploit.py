# RazviOverflow

initial_array = [0x28,0x1b,0x19,0x51,0x1e,0x24,0xd,0,0xd,0x78,0x41,0x6e,0x20,0x72,0xc,2,0x18]

'''
__int64 __fastcall fun_1(const char *a1, __int64 a2)
{
  int i; // [rsp+18h] [rbp-28h]
  int j; // [rsp+1Ch] [rbp-24h]
  __int64 v5[4]; // [rsp+20h] [rbp-20h] BYREF

  v5[3] = __readfsqword(0x28u);
  if ( strlen(a1) == 32 )
  {
    for ( i = 0; i <= 15; ++i )
    {
      if ( *(_DWORD *)(4LL * i + a2) != (char)(a1[i] ^ a1[31 - i]) )
      {
        puts("That's quite a noob thing u did ^.^ ");
        return 0LL;
      }
    }
    qmemcpy(v5, "flag{c4n't_HESOY", 16);
    for ( j = 0; j <= 15; ++j )
    {
      if ( a1[j] != *((_BYTE *)v5 + j) )
      {
        puts("That's quite a noob thing u did ^.^ ");
        return 0LL;
      }
    }
    return 1LL;
  }
  else
  {
    puts("Just open the file first");
    return 0LL;
  }
}
'''
#arg1 or a1 is the cheatcode to discover
arg1 = [None] * 0x20
arg2 = initial_array[1:]
initial_string = "flag{c4n't_HESOY"

for i in range(0x10):
	arg1[i] = initial_string[i]

for i in range(0x10):
	arg1[0x1f-i] = chr(arg2[i] ^ ord(arg1[i]))

print("".join(arg1))

for i in range(0x10):
	assert(arg2[i]==(ord(arg1[0x1f-i])^ord(arg1[i])))
	assert(arg1[i]==initial_string[i])

