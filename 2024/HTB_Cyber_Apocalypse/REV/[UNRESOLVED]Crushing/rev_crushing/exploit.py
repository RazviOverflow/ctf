#RazviOverflow
import sys
import struct



'''
long list_len(long *param_1)

{
  long local_18;
  long local_10;
  
  if (*param_1 == 0) {
    local_10 = 0;
  }
  else {
    local_10 = 1;
    for (local_18 = *param_1; *(long *)(local_18 + 8) != 0; local_18 = *(long *)(local_18 + 8)) {
      local_10 = local_10 + 1;
    }
  }
  return local_10;
}
'''
def list_len(param_1):
    return len(param_1)
    local_18 = param_1
    if param_1[0] == 0:
        local_10 = 0
    else:
        local_10 = 1
        index = 1
        while local_18[index] != 0:
            index += 1
            local_10 += 1

    return local_10



'''
void serialize_and_output(long param_1)

{
  undefined8 local_28;
  void **local_20;
  void *local_18;
  int local_c;
  
  for (local_c = 0; local_c < 0xff; local_c = local_c + 1) {
    local_20 = (void **)(param_1 + (long)local_c * 8);
    local_28 = list_len(local_20);
    fwrite(&local_28,8,1,stdout);
    for (local_18 = *local_20; local_18 != (void *)0x0; local_18 = *(void **)((long)local_18 + 8)) {
      fwrite(local_18,8,1,stdout);
    }
  }
  return;
}
'''
def serialize_and_output(param_1):
    local_c = 0
    print(len(param_1))
    while local_c < 0xff:
        local_20 = param_1[local_c]
        local_28 = list_len(local_20)
        #print(local_28)
        
        for item in param_1[local_c]:
            print(item)

        local_c += 1

def load_map(map_list):
    map_index = 0
    with open("./message.txt.cz", "rb") as file:
        bytes_read = 0
        map_entry = []
        while True:
            try:
                map_entry.append(struct.unpack('B',file.read(1))[0])
                bytes_read+=1
                if bytes_read == 8:
                    map_list[map_index] = map_entry
                    bytes_read = 0
                    map_index += 1
                    map_entry = []
            except:
                break

'''
int64_t* add_char_to_map(int64_t arg1, char arg2, int64_t arg3)
{
    int64_t* var_10 = *(arg1 + (arg2 << 3));
    int64_t* rax_5 = malloc(0x10);
    *rax_5 = arg3;
    rax_5[1] = 0;
    int64_t* rax_12;
    if (var_10 == 0)
    {
        rax_12 = rax_5;
        *((arg2 << 3) + arg1) = rax_12;
    }
    else
    {
        while (var_10[1] != 0)
        {
            var_10 = var_10[1];
        }
        rax_12 = var_10;
        rax_12[1] = rax_5;
    }
    return rax_12;
}
'''
def add_char_to_map(param_1,param_2,param_3,result_somehow):
    print(f"Received param_2: {param_2}, param_3: {param_3}")


    #local_10 = param_1[ord(param_2) * 8]
    index_to_recover = int(param_2 / 8)
    print(f"Index to recover:{index_to_recover}")
    result_somehow.append(param_1[index_to_recover][0])
    return

    print(param_1[index_to_recover])
    local_10 = param_1[int(param_2 / 8)]
    print(f"This is local10:{local_10}")
    puVar1 = [[0] for i in range (0x10)];
    print(puVar1)
    puVar1[0] = param_3;
    puVar1[1] = 0;

    if (local_10[0] == 0) :
    #*(undefined8 **)((ulong)param_2 * 8 + param_1) = puVar1;
        local_10[0] = param_3
        param_1[int(param_2 / 8)] = puVar1[0]
    else:
        while local_10[1] != 0:
            local_10.pop(0)

    puVar1 = local_10

    puVar1[1] = param_3;

    result_somehow.append(puVar1);


'''
int32_t main(int32_t argc, char** argv, char** envp)
{
    void s;
    __builtin_memset(&s, 0, 0x7f8);
    int64_t var_10 = 0;
    while (true)
    {
        int32_t rax_2 = getchar();
        if (rax_2 == 0xffffffff)
        {
            break;
        }
        add_char_to_map(&s, rax_2, var_10);
        var_10 = (var_10 + 1);
    }
    serialize_and_output(&s);
    return 0;
}
'''
def main():
    local_818 = [[0] for i in range(0x7f8)] # List of lists, apparently
    #print(local_818)
    var_10h = 0
    result_somehow = [[0] for i in range(0x7f8)]
    load_map(local_818)
    print(local_818)

    local_10 = 0
    
    map_index = 0

    for element in local_818:
        print(f"OBTAINED: {add_char_to_map(local_818, element[0], local_10, result_somehow)}")
        local_10 += 1

    serialize_and_output(local_818)
    print(f"Final print:{local_818}")

    '''
        serialize_and_output(local_818);
        return 0;
    '''


if __name__ == '__main__':
    main()

def debug(p):
    pid = util.proc.pidof(p)[0]
    print(f"Pid is: {pid}")
    util.proc.wait_for_debugger(pid)

with open("./message.txt.cz", "rb", buffering=0) as file:
	contents = file.read()

context.binary = binary = "./crush"
context.log_level = "debug"
p = process()
debug(p)
p.sendline(contents)

